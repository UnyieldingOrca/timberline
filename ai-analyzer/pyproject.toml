[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-analyzer"
version = "0.1.0"
description = "AI-powered log analysis service for Kubernetes environments"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Timberline Team"}
]
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "pymilvus>=2.6.0",
    "openai>=1.0.0",
    "anthropic>=0.3.0",
    "langchain>=0.1.0",
    "langchain-openai>=0.1.0",
    "langchain-community>=0.1.0",
    "python-dotenv>=1.0.0",
    "loguru>=0.7.0",
    "httpx>=0.24.0",
    "click>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "python-semantic-release>=8.0.0",
]

[project.scripts]
ai-analyzer = "analyzer.cli.main:cli"

[project.urls]
"Homepage" = "https://github.com/UnyieldingOrca/timberline"
"Bug Reports" = "https://github.com/UnyieldingOrca/timberline/issues"
"Source" = "https://github.com/UnyieldingOrca/timberline"

[tool.setuptools.packages.find]
where = ["."]
include = ["analyzer*"]

[tool.setuptools.package-data]
analyzer = ["py.typed"]

[tool.black]
line-length = 100
target-version = ['py311']

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
pythonpath = [
    "."
]

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = ["analyzer/__init__.py:__version__"]
build_command = "pip install build && python -m build"
dist_path = "dist/"
upload_to_pypi = false
upload_to_release = true
remove_dist = false
changelog_file = "CHANGELOG.md"
changelog_placeholder = "<!--next-version-placeholder-->"

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote.token]
env = "GH_TOKEN"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []